// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/khulnasoft/gbpf"
)

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*gbpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := gbpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See gbpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *gbpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed gbpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed gbpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	EgressProgFunc  *gbpf.ProgramSpec `gbpf:"egress_prog_func"`
	IngressProgFunc *gbpf.ProgramSpec `gbpf:"ingress_prog_func"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed gbpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed gbpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
	EgressPktCount  *gbpf.VariableSpec `gbpf:"egress_pkt_count"`
	IngressPktCount *gbpf.VariableSpec `gbpf:"ingress_pkt_count"`
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or gbpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or gbpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
}

func (m *bpfMaps) Close() error {
	return _BpfClose()
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or gbpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
	EgressPktCount  *gbpf.Variable `gbpf:"egress_pkt_count"`
	IngressPktCount *gbpf.Variable `gbpf:"ingress_pkt_count"`
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or gbpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	EgressProgFunc  *gbpf.Program `gbpf:"egress_prog_func"`
	IngressProgFunc *gbpf.Program `gbpf:"ingress_prog_func"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.EgressProgFunc,
		p.IngressProgFunc,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfeb.o
var _BpfBytes []byte
